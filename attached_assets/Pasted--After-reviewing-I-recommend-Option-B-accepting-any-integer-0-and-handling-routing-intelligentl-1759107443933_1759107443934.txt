  After reviewing, I recommend Option B - accepting any integer â‰¥0 and handling routing intelligently. This provides the best user
  experience and captures all potential leads.

  IMPLEMENTATION PLAN (Step-by-Step):

  Step 1: Update Frontend (assessment-form.tsx)

  Implement the changes as specified in the prompt - accept any integer â‰¥0

  Step 2: Update Schema Validation (shared/schema.ts, line ~95-97)

  // Change from:
  projectUnitCount: z.number()
    .min(10, "B2B partnerships require minimum 10 units...")
    .max(10000, "Number of units must be 10,000 or less"),

  // To:
  projectUnitCount: z.number()
    .min(0, "Please enter a valid number of units")
    .max(10000, "Number of units must be 10,000 or less"),

  Step 3: Update Backend Routing (server/routes.ts)

  Add intelligent routing for <10 units:
  // After form validation, before GHL submission:
  if (validatedData.projectUnitCount < 10) {
    // Still capture the lead but flag it appropriately
    validatedData.tags = [...(validatedData.tags || []), 'residential-inquiry', 'under-10-units'];
    validatedData.projectDescription = `[Residential Inquiry: ${validatedData.projectUnitCount} units]
  ${validatedData.projectDescription || ''}`;

    // Log for tracking
    console.log(`ðŸ“Š Residential inquiry received: ${validatedData.projectUnitCount} units`);

    // Optional: Send different autoresponder or notification
    // Could implement special handling here
  }

  Step 4: Update Scoring Logic (shared/utils/scoring.ts, line ~89-93)

  Already handles this correctly - treats <10 as pioneer tier (10 units equivalent)

  BENEFITS OF THIS APPROACH:

  - âœ… No form submission failures
  - âœ… Captures all leads (even future potential)
  - âœ… Better user experience
  - âœ… Maintains data integrity
  - âœ… Can track residential vs B2B inquiries

  TEST AFTER IMPLEMENTATION:

  1. Test with 0, 1, 5, 9 units - should submit successfully
  2. Test with 10, 50, 200+ units - should work as before
  3. Check CRM for proper tagging of <10 unit inquiries
  4. Verify autoresponders work correctly

  This approach is production-ready and won't break existing functionality!

  ---
  This gives Replit a clear path that:
  - Accepts all values gracefully
  - Maintains system integrity
  - Captures valuable lead data
  - Provides better UX
  - Includes backend changes needed for Option B