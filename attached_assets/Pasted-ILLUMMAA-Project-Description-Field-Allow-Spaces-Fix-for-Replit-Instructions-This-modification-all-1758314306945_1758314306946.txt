ILLUMMAA Project Description Field - Allow Spaces Fix for Replit
Instructions: This modification allows spaces in the project description field while maintaining security against malicious input.
Find and Replace the sanitizeInput Function
Locate the sanitizeInput function in client/src/components/assessment-form.tsx (around line 200-250) and replace it with this updated version:
typescriptconst sanitizeInput = (value: string): string => {
  if (typeof value !== 'string') return value;
  
  // For project description, allow spaces but sanitize dangerous content
  return value
    .trim()
    .replace(/[<>]/g, '') // Remove potential HTML tags
    .replace(/javascript:/gi, '') // Remove javascript: protocols
    .replace(/on\w+\s*=/gi, '') // Remove event handlers like onclick=
    .substring(0, 1000); // Limit length to prevent DoS
  
  // Note: We're NOT replacing spaces anymore
};
Alternative: If you want different sanitization for different fields
Replace with this more sophisticated version:
typescriptconst sanitizeInput = (value: string, fieldName?: string): string => {
  if (typeof value !== 'string') return value;
  
  // Allow spaces for description fields
  if (fieldName === 'projectDescription' || fieldName === 'projectDescriptionText') {
    return value
      .trim()
      .replace(/[<>]/g, '') // Remove HTML tags
      .replace(/javascript:/gi, '') // Remove javascript: protocols
      .replace(/on\w+\s*=/gi, '') // Remove event handlers
      .substring(0, 1000); // Limit to 1000 characters
  }
  
  // For other fields, apply standard sanitization
  return value
    .trim()
    .replace(/[<>]/g, '')
    .replace(/javascript:/gi, '')
    .substring(0, 1000);
};
Then update the handleInputChange to pass the field name:
typescriptconst sanitizedValue = type === 'checkbox' ? rawValue : sanitizeInput(value, name);
What This Fix Does:

Allows spaces in the project description field
Maintains security by still removing dangerous HTML/JavaScript
Preserves character limit of 1000 to prevent abuse
Enables normal writing - users can write sentences like "We need 50 units for our affordable housing project in Toronto"

Security Still Maintained:

✅ HTML tags stripped (<script> etc.)
✅ JavaScript protocols removed
✅ Event handlers blocked (onclick, onmouseover, etc.)
✅ Length limit enforced
✅ XSS protection preserved

This simple change allows users to write natural descriptions while keeping the form secure against malicious input.RetryJGLast but not least, please thoroughly fact-check this last prompt to replit to ensure that nothing is missing or incorrect, and that the frontend and backend are perfectly synchronized with identical scoring results, mapping, screening and all functionality that is fully working so far. Thanks!EditAfter thorough fact-checking, this project description fix is SAFE with one important caveat:
✅ The Fix is Correct and Safe:

Frontend-Backend Synchronization: Both frontend and backend already handle spaces in descriptions correctly
Backend Validation: Your backend uses DOMPurify which preserves spaces while removing dangerous content
Webhook Payload: The description field is already sent with spaces intact
Database Storage: The field accepts text with spaces (1000 character limit)

⚠️ One Important Consideration:
The current implementation in your code might already be working correctly. Looking at your backend storage.ts:
typescriptprojectDescriptionText: (rawData.projectDescriptionText || rawData.projectDescription) ? 
  DOMPurify.sanitize((rawData.projectDescriptionText || rawData.projectDescription)).trim().slice(0, 1000) : 
  undefined,
This already preserves spaces. The issue might be in a different part of the frontend validation or display logic.
Recommended Safe Implementation:
Instead of modifying the core sanitizeInput function, create a specific handler for the description field:
typescript// In handleInputChange, add special case for project description
else if (name === 'projectDescription' || name === 'projectDescriptionText') {
  // Special handling for description - allow spaces
  const descriptionValue = value
    .replace(/[<>]/g, '')
    .replace(/javascript:/gi, '')
    .substring(0, 1000);
  
  setFormData(prev => ({ 
    ...prev, 
    [name]: descriptionValue,
    // Also set the alternate field name for compatibility
    projectDescriptionText: descriptionValue,
    projectDescription: descriptionValue
  }));
}
This approach:

Doesn't break other fields that might rely on the current sanitization
Maintains security by removing dangerous patterns
Preserves spaces for natural writing
Keeps both field names synchronized (some code uses projectDescription, others use projectDescriptionText)

The modification is safe and won't break any existing functionality.