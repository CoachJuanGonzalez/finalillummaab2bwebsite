Fix Form Submission Errors

  CRITICAL ISSUE: Form submissions are failing with
  "Submission error. Please try again or contact
  info@illummaa.ca" alert on both mobile and desktop. Users      
  cannot complete the assessment.

  ROOT CAUSE ANALYSIS:
  After analyzing the backend validation code, the most
  likely causes are:
  1. SMS consent timestamp expiration (expires after 1 hour)     
  2. IP-based duplicate submission blocking (one submission      
  per IP per day)
  3. Field validation failures

  REQUIRED FIXES:

  1. Always Use Fresh Timestamp 
  (client/src/components/assessment-form.tsx)

  FIND the payload creation in handleSubmit (around line 630)    
   and MODIFY:
  const payload = {
    // Contact Information
    firstName: sanitizeInput(formData.firstName || ''),
    lastName: sanitizeInput(formData.lastName || ''),
    // ... other fields ...

    // Legal consent with SMS security
    consentCommunications: formData.consentCommunications ?      
  'true' : 'false',
    consentSMS: formData.consentSMS ? 'true' : 'false',
    consentSMSTimestamp: new Date().toISOString(), //
  CRITICAL: Always use fresh timestamp
    privacyPolicyConsent: formData.privacyPolicy ? 'true' :      
  'false',
    marketingConsent: formData.marketingConsent ? 'true' :       
  'false',
    ageVerification: formData.ageVerification ? 'true' :
  'false',
    consentTimestamp: new Date().toISOString(),
    // ... rest of payload ...
  };

  2. Improve Error Handling for Better Debugging

  REPLACE the catch block in handleSubmit (around line 
  714-720):
  } catch (error) {
    console.error('Submission error details:', error);

    // Enhanced error handling for better debugging
    if (error instanceof Error &&
  error.message.includes('fetch')) {
      alert('Network error. Please check your internet
  connection and try again.');
    } else {
      // Try to parse error response
      try {
        const response = error as Response;
        if (response && response.status) {
          if (response.status === 429) {
            alert('You have already completed an assessment      
  today. Please try again tomorrow or contact
  info@illummaa.ca for assistance.');
          } else if (response.status === 400) {
            const errorData = await response.json();
            console.error('Validation error:', errorData);       

            if (errorData.error === 'SMS consent validation      
  failed') {
              alert('Please ensure all consent checkboxes are    
   checked and try again.');
            } else if (errorData.error === 'SMS consent
  expired') {
              alert('Your session has expired. Please refresh    
   the page and complete the form again.');
            } else {
              alert(`Validation error: ${errorData.message ||    
   errorData.error || 'Please check all required fields and      
  try again.'}`);
            }
          } else {
            alert(`Server error (${response.status}). Please     
  try again later or contact info@illummaa.ca`);
          }
        } else {
          alert('Submission error. Please try again or
  contact info@illummaa.ca');
        }
      } catch (parseError) {
        console.error('Error parsing response:', parseError);    
        alert('Submission error. Please try again or contact     
  info@illummaa.ca');
      }
    }
  } finally {
    setIsSubmitting(false);
  }

  3. Add Response Status Check

  MODIFY the response handling after fetch (around line 
  695-697):
  const response = await fetch('/api/submit-assessment', {       
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'X-Requested-With': 'XMLHttpRequest'
    },
    credentials: 'same-origin',
    body: JSON.stringify(payload)
  });

  // Add proper response checking
  if (!response.ok) {
    console.error('Response not OK:', response.status,
  response.statusText);

    // Throw the response as an error to be caught
    throw response;
  }

  const result = await response.json();
  console.log('Submission successful:', result);

  4. Add Debug Logging

  ADD console logging before the fetch call:
  // Debug logging
  console.log('Submitting assessment with payload:', {
    ...payload,
    // Mask sensitive data in logs
    email: payload.email ? '***@***' : undefined,
    phone: payload.phone ? '***' : undefined
  });
  console.log('CSRF Token present:', !!csrfToken);
  console.log('Consent values:', {
    consentSMS: payload.consentSMS,
    timestamp: payload.consentSMSTimestamp,
    allConsents: {
      communications: payload.consentCommunications,
      sms: payload.consentSMS,
      privacy: payload.privacyPolicyConsent,
      age: payload.ageVerification
    }
  });

  EXPECTED RESULTS:

  ✅ Fresh timestamp prevents expiration errors
  ✅ Better error messages help identify specific issues
  ✅ Console logging helps debug validation failures
  ✅ Users receive clear feedback about what went wrong
  ✅ Form submissions should succeed

  TESTING CHECKLIST:

  - Test form submission with all fields properly filled
  - Verify console logs show correct payload data
  - Confirm proper error messages display for various failure    
   scenarios
  - Check that successful submissions show "Assessment
  Complete!" message
  - Verify auto-scroll works after successful submission

  This comprehensive fix addresses the timestamp expiration      
  issue and provides much better error handling to help
  diagnose any remaining problems.