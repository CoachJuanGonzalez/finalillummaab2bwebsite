// ILLÃœMMAA Assessment Form - Unit Count Logic Enhancement
// Complete implementation prompt for Replit with enterprise security compliance

Please implement the following unit count dropdown logic enhancement to improve lead qualification integrity:

OBJECTIVE: Remove "Just exploring options" from unit count dropdown for non-Explorer tiers to enforce commitment-level consistency and eliminate tier gaming.

BUSINESS LOGIC:
- Explorer tier: Auto-set unitCount="0" (hidden from user, education-focused)
- All other tiers: Must select actual unit ranges (no exploration option available)
- Users genuinely exploring should select "Just researching" in Step 1, not claim planning status while avoiding unit commitment

// FRONTEND REACT COMPONENT MODIFICATIONS

// 1. Update unit count dropdown in Step 1 - Replace existing unitCount select with conditional options:

{formData.readiness && formData.readiness !== 'researching' && (
  <div>
    <label className="block text-sm text-gray-700 mb-1.5">
      Number of units needed <span className="text-red-500">*</span>
    </label>
    <select
      name="unitCount"
      value={formData.unitCount || ''}
      onChange={handleInputChange}
      className={`w-full px-4 py-3 rounded-lg border ${
        errors.unitCount ? 'border-red-300 bg-red-50' : 'border-gray-300'
      } focus:border-indigo-500 focus:ring-2 focus:ring-indigo-100 transition-all outline-none appearance-none bg-white`}
      style={{
        backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e")`,
        backgroundPosition: 'right 0.5rem center',
        backgroundRepeat: 'no-repeat',
        backgroundSize: '1.5em 1.5em',
        paddingRight: '2.5rem'
      }}
      required
    >
      <option value="">Select number of units...</option>
      <option value="1">1 home</option>
      <option value="2">2 homes</option>
      <option value="25">3-49 units (Starter)</option>
      <option value="75">50-149 units (Pioneer)</option>
      <option value="200">150-299 units (Preferred)</option>
      <option value="500">300+ units (Elite)</option>
    </select>
    {errors.unitCount && (
      <p className="text-red-500 text-xs mt-1">{errors.unitCount}</p>
    )}
  </div>
)}

// 2. Update handleInputChange function - Enhanced readiness handling with secure unit count logic:

const handleInputChange = (e) => {
  const { name, value, type, checked } = e.target;
  const rawValue = type === 'checkbox' ? checked : value;
  const sanitizedValue = type === 'checkbox' ? rawValue : sanitizeInput(rawValue);
  
  // SMS consent security validation
  if (name === 'consentSMS' && typeof sanitizedValue !== 'boolean') {
    console.warn('Security: Invalid SMS consent value type');
    return;
  }
  
  // Enhanced readiness handling with secure unit count enforcement
  if (name === 'readiness') {
    const isResearching = value === 'researching';
    setIsExplorer(isResearching);
    
    if (isResearching) {
      // Auto-set Explorer defaults for researchers only
      setFormData(prev => ({
        ...prev,
        readiness: value,
        unitCount: '0', // Hidden from user but set securely in data
        budget: 'Just exploring options' // Auto-set for consistency
      }));
      setCustomerTier('tier_0_explorer');
    } else {
      // For ALL commitment-level options, clear units to force meaningful selection
      setFormData(prev => ({
        ...prev,
        readiness: value,
        unitCount: '', // Clear to force actual unit count selection
        budget: '' // Clear budget for non-researchers
      }));
      // Don't set tier yet - wait for units selection
    }
  } else if (name === 'unitCount') {
    // Security validation: Ensure non-Explorer tiers cannot select exploration values
    const isCommitmentTier = formData.readiness !== 'researching';
    if (isCommitmentTier && (value === '0' || value === 'Just exploring options')) {
      console.warn('Security: Invalid unit count for commitment-level tier');
      return; // Block invalid selection
    }
    
    // When units change, recalculate tier with current readiness
    setFormData(prev => ({ ...prev, unitCount: value }));
    const tier = determineCustomerTier(value, formData.readiness);
    setCustomerTier(tier);
    
    // Update company requirement based on tier
    const companyRequired = tier !== 'tier_0_explorer' && tier !== 'tier_1_starter';
    if (document.getElementById('company')) {
      document.getElementById('company').required = companyRequired;
    }
  } else {
    // Keep existing logic for other fields
    setFormData(prev => ({ 
      ...prev, 
      [name]: sanitizedValue,
      ...(name === 'consentSMS' && sanitizedValue && {
        consentSMSTimestamp: new Date().toISOString()
      })
    }));
  }
  
  // Clear errors
  setErrors(prev => ({ ...prev, [name]: '' }));
  
  // Calculate priority score for relevant fields
  if (['unitCount', 'budget', 'timeline', 'province', 'developerType', 'governmentPrograms'].includes(name)) {
    setTimeout(calculatePriorityScore, 100);
  }
};

// 3. Update determineCustomerTier function - Enhanced tier logic with unit count validation:

const determineCustomerTier = (units, readiness) => {
  const unitCount = parseInt(units) || 0;
  
  // Just researching ALWAYS = Explorer (secure default)
  if (readiness === 'researching') {
    return 'tier_0_explorer';
  }
  
  // Security check: Commitment-level users must have actual unit counts
  if (readiness !== 'researching' && unitCount === 0) {
    console.warn('Security: Zero units for non-research tier - maintaining Explorer classification');
    return 'tier_0_explorer'; // Secure fallback
  }
  
  // Planning long-term (12+ months) - weighted by units with minimum threshold
  if (readiness === 'planning-long') {
    if (unitCount <= 0) return 'tier_0_explorer'; // Security fallback
    if (unitCount <= 49) return 'tier_1_starter';
    if (unitCount <= 149) return 'tier_2_pioneer';
    if (unitCount <= 299) return 'tier_3_preferred';
    return 'tier_4_elite';
  }
  
  // All other readiness levels - standard logic with validation
  if (unitCount <= 0) return 'tier_0_explorer'; // Security fallback
  if (unitCount <= 49) return 'tier_1_starter';
  if (unitCount <= 149) return 'tier_2_pioneer';
  if (unitCount <= 299) return 'tier_3_preferred';
  return 'tier_4_elite';
};

// 4. Update validation logic in validateStep function - Enhanced Step 1 validation:

const validateStep = (step) => {
  const newErrors = {};
  
  switch(step) {
    case 1:
      if (!formData.readiness) {
        newErrors.readiness = 'Please select your journey stage';
      }
      
      // Enhanced validation: Only validate units if NOT "Just researching"
      if (formData.readiness !== 'researching') {
        if (!formData.unitCount || formData.unitCount === '') {
          newErrors.unitCount = 'Please select number of units';
        }
        
        // Security validation: Ensure commitment-level users have meaningful unit counts
        const unitCount = parseInt(formData.unitCount) || 0;
        if (unitCount <= 0) {
          newErrors.unitCount = 'Please select a valid number of units for your project';
        }
      }
      break;
      
    // ... rest of validation cases remain unchanged
  }
  
  setErrors(newErrors);
  return Object.keys(newErrors).length === 0;
};

// BACKEND SECURITY ENHANCEMENTS

// 5. Add enhanced validation rules in assessmentValidation array:

const assessmentValidation = [
  // ... existing validation rules
  
  // Enhanced unit count validation with tier consistency
  body('projectUnitCount').custom((value, { req }) => {
    const unitCount = parseInt(value) || 0;
    const readiness = req.body.readinessToBuy;
    
    // Security: Explorer tier can have 0 units
    if (readiness === 'researching' && unitCount === 0) {
      return true;
    }
    
    // Security: Commitment-level tiers must have > 0 units
    if (readiness !== 'researching' && unitCount <= 0) {
      throw new Error('Commitment-level inquiries must specify actual unit count');
    }
    
    // Range validation
    if (unitCount < 0 || unitCount > 10000) {
      throw new Error('Unit count must be between 1 and 10,000');
    }
    
    return true;
  }),
  
  // ... rest of existing validation rules
];

// 6. Enhanced webhook payload generation with security validation:

const generateSecurePayload = (sanitizedData) => {
  // Security validation before webhook delivery
  const unitCount = parseInt(sanitizedData.projectUnitCount) || 0;
  const readiness = sanitizedData.readinessToBuy;
  
  // Validate tier consistency
  if (readiness !== 'researching' && unitCount <= 0) {
    throw new Error('Security: Invalid unit count for commitment-level tier');
  }
  
  return {
    // ... existing payload fields
    projectUnitCount: sanitizedData.projectUnitCount,
    readinessToBuy: readiness,
    tierConsistencyValidated: 'true',
    unitCountSecurityValidated: 'true',
    // ... rest of payload
  };
};

// 7. Enhanced submission endpoint security:

router.post('/submit-assessment', 
  assessmentLimiter,
  csrfProtection,
  assessmentValidation,
  async (req, res) => {
    try {
      // ... existing validation logic
      
      // Additional tier consistency security check
      const unitCount = parseInt(req.body.projectUnitCount) || 0;
      const readiness = req.body.readinessToBuy;
      
      if (readiness !== 'researching' && unitCount <= 0) {
        return res.status(400).json({
          success: false,
          message: 'Commitment-level inquiries must specify actual unit count',
          securityViolation: true
        });
      }
      
      // Generate secure payload
      const payload = generateSecurePayload(sanitizedData);
      
      // ... rest of submission logic
      
    } catch (error) {
      // Enhanced error logging with security context
      console.error('Assessment submission error:', {
        error: error.message,
        securityValidation: 'failed',
        timestamp: new Date().toISOString()
      });
      
      res.status(500).json({
        success: false,
        message: 'Security validation failed. Please verify your selections.',
        errorId: crypto.randomBytes(8).toString('hex')
      });
    }
  }
);

// SECURITY COMPLIANCE NOTES:
// - Input sanitization maintained for all user inputs
// - CSRF protection preserved across all form interactions
// - Rate limiting continues to prevent abuse
// - Enhanced validation prevents tier gaming attempts
// - Secure fallbacks for invalid unit count selections
// - Audit logging for security violations
// - CASL/PIPEDA compliance maintained throughout

// BUSINESS LOGIC ENFORCEMENT:
// - Explorer tier: Auto-set unitCount="0" (hidden, education-focused)
// - Commitment tiers: Must select actual unit ranges (1, 2, 25, 75, 200, 500)
// - No "Just exploring" option for planning/commitment level users
// - Tier classification integrity maintained through validation
// - Lead qualification accuracy improved through forced commitment consistency

// IMPLEMENTATION RESULT:
// Users claiming planning/commitment readiness must specify meaningful unit counts, eliminating tier gaming and improving lead qualification integrity while maintaining all enterprise security standards.